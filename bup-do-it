#!/bin/bash
TIME_START=$(date +%s)
BACKUP_DRIVE=/media/backup
BUP=bup
BUP_DIR=${BACKUP_DRIVE}/${BUP}
LOG_FILE=${BACKUP_DRIVE}/backupError.log

DRYRUN=FALSE

run() {
	if [ "${DRYRUN}" == "TRUE" ]; then
		echo "$@"
	else
		"$@"
	fi
}

mountit() {
	run rm /tmp/backupError.log
	run mount ${BACKUP_DRIVE} -o remount,rw >> /tmp/backupError.log
	run cat /tmp/backupError.log >> ${LOG_FILE}
}
unmountit() {
        run mount ${BACKUP_DRIVE} -o remount,ro
}
getOwner() {
	echo $(ls -l ${BACKUP_DRIVE} | grep ${BUP} | awk '{print $3}')
}

ech() {
	echo "$1" | tee -a ${LOG_FILE}
}
excludeFolders() {

	excludeF=(
		'/home/christian/.gvfs/'
		'/home/christian/.cache/'
		'/home/christian/To.Sort'
		'/home/christian/.adobe/'
		'/home/christian/.dropbox/'
		'/home/christian/.thumbnails/'
		'/home/christian/Downloads/'
		'/home/christian/.pyload/Downloads/'
	)
	excludeStr=''
	for((i=0;i<${#excludeF};i++));
	do
		if [ "${excludeF[$i]}" == "" ]; then
			continue
		fi
		excludeStr="$excludeStr --exclude=${excludeF[$i]}"
	done
}


backup() {
	mountit
	
	ech "Beginning Backup: $(date)"
	excludeFolders
	ech "Excluded Folders: ${excludeStr}" 
	run bup -d ${BUP_DIR} index ${excludeStr} ~ >> ${LOG_FILE}

	echo ""
	ech "Beginning Saving: $(date)"

	run bup -d ${BUP_DIR} save -n $(hostname) ~ >> ${LOG_FILE}
	echo ""
	echo "Setting Directory Owner back to owner"
	run chown -R $(getOwner):$(getOwner) $BUP_DIR	
	unmountit
	durationInS="$(($(date +%s)-${TIME_START}))"
	durationNice="$((durationInS/3600))h$((durationInS % 3600 / 60))m$((durationInS % 60))s"
	duration="(${durationInS}s | ${durationNice})" 
	ech "Backup Done: ${duration} - $(date) "
	echo ""
}

if [ "$1" != "" ]; then
        $1
        exit 0
else
	
	backup
fi

